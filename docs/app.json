[{"name":"app.R","content":"#\r\n# This is a Shiny web application. You can run the application by clicking\r\n# the 'Run App' button above.\r\n#\r\n# Find out more about building applications with Shiny here:\r\n#\r\n#    https://shiny.posit.co/\r\n#\r\n\r\nlibrary(shiny)\r\n# Remove plotly and DT for Shinylive compatibility - use base graphics instead\r\n# library(plotly)\r\n# library(DT)\r\n\r\n# Define UI for application that draws a histogram\r\nui <- fluidPage(\r\n  titlePanel(\"Program NOREMARK - Mark-Resight Population Estimation\"),\r\n  tags$style(HTML(\"\r\n    .well { background-color: #f5f5f5; border: 1px solid #e3e3e3; }\r\n    .results-box { background-color: #e8f4f8; padding: 15px; border-radius: 5px; margin: 10px 0; }\r\n    .value-display { font-size: 1.2em; font-weight: bold; color: #2c3e50; }\r\n    .help-text { color: #7f8c8d; font-size: 0.9em; margin-top: 5px; }\r\n    .data-table { width: 100%; border-collapse: collapse; }\r\n    .data-table th { background-color: #e9ecef; text-align: center; padding: 8px; }\r\n    .data-table td { padding: 5px; border: 1px solid #dee2e6; }\r\n    .data-table input { width: 90%; text-align: center; }\r\n  \")),\r\n  \r\n  sidebarLayout(\r\n    sidebarPanel(\r\n      width = 4,\r\n      wellPanel(\r\n        h4(\"Study Parameters\"),\r\n        textInput(\"study_title\", \"Study Title:\", value = \"My Mark-Resight Study\"),\r\n        numericInput(\"alpha_level\", \"Alpha Level:\", value = 0.05, min = 0.01, max = 0.50, step = 0.01),\r\n        numericInput(\"num_occasions\", \"Number of Sighting Occasions:\", value = 5, min = 1, max = 50, step = 1),\r\n        actionButton(\"setup_data\", \"Set Up Data Entry\", class = \"btn-primary\"),\r\n        div(class = \"help-text\", \"Set the number of occasions first, then enter data in the table below.\")\r\n      ),\r\n      \r\n      wellPanel(\r\n        h4(\"Data Entry Table\"),\r\n        uiOutput(\"data_table_ui\"),\r\n        actionButton(\"run_analysis\", \"Run NOREMARK Analysis\", class = \"btn-success\"),\r\n        div(class = \"help-text\", \"Enter data for all occasions, then click to analyze.\")\r\n      )\r\n    ),\r\n    \r\n    mainPanel(\r\n      width = 8,\r\n      conditionalPanel(\r\n        condition = \"output.results_available\",\r\n        h3(\"Analysis Results\"),\r\n        fluidRow(\r\n          column(4, wellPanel(\r\n            h4(\"Population Estimate (JHE)\"),\r\n            div(class = \"value-display\", textOutput(\"population_display\"))\r\n          )),\r\n          column(4, wellPanel(\r\n            h4(\"Confidence Interval\"),\r\n            div(class = \"value-display\", textOutput(\"ci_display\"))\r\n          )),\r\n          column(4, wellPanel(\r\n            h4(\"Minimum Known Alive\"),\r\n            div(class = \"value-display\", textOutput(\"min_alive_display\"))\r\n          ))\r\n        ),\r\n        \r\n        fluidRow(\r\n          column(6, wellPanel(\r\n            h4(\"Detailed Results\"),\r\n            tableOutput(\"results_table\")\r\n          )),\r\n          column(6, wellPanel(\r\n            h4(\"Mean Chapman Estimate\"),\r\n            div(class = \"value-display\", textOutput(\"mean_chapman_display\")),\r\n            div(class = \"help-text\", \"Average of occasion-specific Chapman estimates\")\r\n          ))\r\n        ),\r\n        \r\n        h4(\"Occasion-Specific Data\"),\r\n        tableOutput(\"occasion_table\"),  # Changed from DTOutput to tableOutput\r\n        \r\n        fluidRow(\r\n          column(12, plotOutput(\"sighting_plot\"))  # Changed from plotlyOutput to plotOutput\r\n        )\r\n      ),\r\n      \r\n      conditionalPanel(\r\n        condition = \"!output.results_available\",\r\n        wellPanel(\r\n          h4(\"Ready for Analysis\"),\r\n          p(\"Please set up your data entry and run the analysis to see results here.\"),\r\n          p(\"This implementation uses the Joint Hypergeometric Maximum Likelihood Estimator (JHE)\"),\r\n          p(\"Reference: White, G.C. 1996. Program NOREMARK Software Reference Manual\")\r\n        )\r\n      )\r\n    )\r\n  )\r\n)\r\n\r\n#NOREMARK Function\r\nNOREMARK <- function(marked_available, marked_seen, unmarked_seen, \r\n                     confidence = 0.95, interval_max = 20000) {\r\n  \r\n  # Input validation\r\n  if (length(marked_available) != length(marked_seen) || \r\n      length(marked_seen) != length(unmarked_seen)) {\r\n    stop(\"All input vectors must have the same length\")\r\n  }\r\n  \r\n  occ <- length(marked_seen)\r\n  total_seen <- marked_seen + unmarked_seen\r\n  \r\n  # Calculate minimum number known alive\r\n  min_alive <- max(marked_available) + max(unmarked_seen)\r\n  \r\n  # CORRECTED Chapman estimator with exact NOREMARK variance formula\r\n  chapman_estimator <- function(M, m, n, confidence = 0.95) {\r\n    # Chapman estimator\r\n    N_hat <- ((M + 1) * (n + 1)) / (m + 1) - 1\r\n    \r\n    # NOREMARK's exact variance formula for Chapman estimator\r\n    # This matches the manual output exactly\r\n    var_N <- ( (M + 1) * (n + 1) * (M - m) * (n - m) ) / \r\n      ( (m + 1) * (m + 1) * (m + 2) )\r\n    \r\n    # Normal approximation confidence intervals (matches NOREMARK manual output)\r\n    if (var_N > 0 && is.finite(var_N)) {\r\n      se <- sqrt(var_N)\r\n      z <- qnorm(1 - (1 - confidence) / 2)\r\n      \r\n      lower <- N_hat - z * se\r\n      upper <- N_hat + z * se\r\n    } else {\r\n      lower <- NA\r\n      upper <- NA\r\n    }\r\n    \r\n    return(list(estimate = N_hat, lower = lower, upper = upper))\r\n  }\r\n  \r\n  # Calculate Chapman estimates for each occasion\r\n  chapman_results <- list()\r\n  for (i in 1:occ) {\r\n    chapman_results[[i]] <- chapman_estimator(\r\n      M = marked_available[i],\r\n      m = marked_seen[i], \r\n      n = total_seen[i],\r\n      confidence = confidence\r\n    )\r\n  }\r\n  \r\n  # Joint Hypergeometric Likelihood Function\r\n  joint_hypergeometric_loglik <- function(N) {\r\n    ll_value <- 0\r\n    for (i in 1:occ) {\r\n      M_i <- marked_available[i]\r\n      m_i <- marked_seen[i]\r\n      u_i <- unmarked_seen[i]\r\n      n_i <- total_seen[i]\r\n      \r\n      if (n_i == 0) next\r\n      if (M_i > N || m_i > M_i || u_i > (N - M_i) || m_i > n_i || u_i > n_i) {\r\n        return(-1e20)\r\n      }\r\n      \r\n      ll_value <- ll_value + lchoose(M_i, m_i) + lchoose(N - M_i, u_i) - lchoose(N, n_i)\r\n    }\r\n    return(ll_value)\r\n  }\r\n  \r\n  # Find MLE using optimization\r\n  lower_bound <- max(min_alive, max(total_seen) + 1)\r\n  \r\n  mle_result <- optimize(\r\n    function(N) -joint_hypergeometric_loglik(N),\r\n    interval = c(lower_bound, interval_max),\r\n    maximum = FALSE,\r\n    tol = 1e-8\r\n  )\r\n  \r\n  N_mle <- round(mle_result$minimum)\r\n  max_loglik <- -mle_result$objective\r\n  \r\n  # Profile Likelihood Confidence Interval\r\n  chi_critical <- qchisq(confidence, df = 1)\r\n  target_loglik <- max_loglik - chi_critical / 2\r\n  \r\n  lower_ci <- tryCatch({\r\n    optimize(\r\n      function(N) (joint_hypergeometric_loglik(N) - target_loglik)^2,\r\n      interval = c(lower_bound, N_mle),\r\n      tol = 1e-8\r\n    )$minimum\r\n  }, error = function(e) min_alive)\r\n  \r\n  upper_ci <- tryCatch({\r\n    optimize(\r\n      function(N) (joint_hypergeometric_loglik(N) - target_loglik)^2,\r\n      interval = c(N_mle, interval_max),\r\n      tol = 1e-8\r\n    )$minimum\r\n  }, error = function(e) interval_max)\r\n  \r\n  # Extract Chapman estimates for data frame\r\n  chapman_estimates <- sapply(chapman_results, function(x) x$estimate)\r\n  chapman_lower <- sapply(chapman_results, function(x) x$lower)\r\n  chapman_upper <- sapply(chapman_results, function(x) x$upper)\r\n  \r\n  occasion_stats <- data.frame(\r\n    occasion = 1:occ,\r\n    marked_available = marked_available,\r\n    marked_seen = marked_seen,\r\n    unmarked_seen = unmarked_seen,\r\n    total_seen = total_seen,\r\n    sighting_rate = ifelse(marked_available > 0, marked_seen / marked_available, NA),\r\n    chapman_estimate = round(chapman_estimates, 1),\r\n    chapman_lower = round(chapman_lower, 1),\r\n    chapman_upper = round(chapman_upper, 1)\r\n  )\r\n  \r\n  valid_chapman <- chapman_estimates[is.finite(chapman_estimates)]\r\n  mean_chapman <- ifelse(length(valid_chapman) > 0, mean(valid_chapman), NA)\r\n  \r\n  list(\r\n    minimum_alive = min_alive,\r\n    population_estimate = N_mle,\r\n    confidence_interval = c(lower = round(lower_ci, 1), upper = round(upper_ci, 1)),\r\n    confidence_level = confidence,\r\n    max_loglikelihood = max_loglik,\r\n    occasion_data = occasion_stats,\r\n    mean_chapman_estimate = round(mean_chapman, 1),\r\n    method = \"Joint Hypergeometric Maximum Likelihood Estimator (JHE)\"\r\n  )\r\n}\r\n\r\n\r\n# Define server logic required to draw a histogram\r\nserver <- function(input, output, session) {\r\n  \r\n  # Reactive values\r\n  study_data <- reactiveVal()\r\n  analysis_results <- reactiveVal()\r\n  \r\n  # Check if results are available\r\n  output$results_available <- reactive({\r\n    !is.null(analysis_results())\r\n  })\r\n  outputOptions(output, \"results_available\", suspendWhenHidden = FALSE)\r\n  \r\n  # Data table UI - much better alignment\r\n  output$data_table_ui <- renderUI({\r\n    req(input$num_occasions)\r\n    n <- as.integer(input$num_occasions)\r\n    \r\n    # Create table header\r\n    table_header <- tags$tr(\r\n      tags$th(\"Occasion\"),\r\n      tags$th(\"Marked Available\"),\r\n      tags$th(\"Marked Seen\"),\r\n      tags$th(\"Unmarked Seen\")\r\n    )\r\n    \r\n    # Create table rows\r\n    table_rows <- lapply(1:n, function(i) {\r\n      tags$tr(\r\n        tags$td(style = \"text-align: center; font-weight: bold;\", i),\r\n        tags$td(numericInput(paste0(\"marked_avail_\", i), label = NULL, \r\n                             value = 20, min = 0, width = \"100%\")),\r\n        tags$td(numericInput(paste0(\"marked_seen_\", i), label = NULL, \r\n                             value = if(i == 1) 10 else 8, min = 0, width = \"100%\")),\r\n        tags$td(numericInput(paste0(\"unmarked_seen_\", i), label = NULL, \r\n                             value = if(i == 1) 30 else 25, min = 0, width = \"100%\"))\r\n      )\r\n    })\r\n    \r\n    # Create the table\r\n    tags$table(\r\n      class = \"data-table\",\r\n      table_header,\r\n      table_rows\r\n    )\r\n  })\r\n  \r\n  # Collect and analyze data\r\n  observeEvent(input$run_analysis, {\r\n    req(input$num_occasions)\r\n    \r\n    n <- as.integer(input$num_occasions)\r\n    marked_avail <- numeric(n)\r\n    marked_seen <- numeric(n)\r\n    unmarked_seen <- numeric(n)\r\n    \r\n    # Validate all inputs are provided\r\n    valid_inputs <- TRUE\r\n    for(i in 1:n) {\r\n      if(is.null(input[[paste0(\"marked_avail_\", i)]]) || \r\n         is.null(input[[paste0(\"marked_seen_\", i)]]) || \r\n         is.null(input[[paste0(\"unmarked_seen_\", i)]])) {\r\n        valid_inputs <- FALSE\r\n        break\r\n      }\r\n      marked_avail[i] <- input[[paste0(\"marked_avail_\", i)]]\r\n      marked_seen[i] <- input[[paste0(\"marked_seen_\", i)]]\r\n      unmarked_seen[i] <- input[[paste0(\"unmarked_seen_\", i)]]\r\n    }\r\n    \r\n    if(!valid_inputs) {\r\n      showNotification(\"Please fill in all data fields\", type = \"error\")\r\n      return()\r\n    }\r\n    \r\n    # Store data\r\n    study_data(list(\r\n      title = input$study_title,\r\n      alpha = input$alpha_level,\r\n      marked_available = marked_avail,\r\n      marked_seen = marked_seen,\r\n      unmarked_seen = unmarked_seen\r\n    ))\r\n    \r\n    # Run analysis - FIXED: Use alpha directly, not 1-alpha\r\n    tryCatch({\r\n      results <- NOREMARK(\r\n        marked_available = marked_avail,\r\n        marked_seen = marked_seen,\r\n        unmarked_seen = unmarked_seen,\r\n        confidence = 1 - input$alpha_level  # This is correct: alpha=0.05 -> confidence=0.95\r\n      )\r\n      analysis_results(results)\r\n    }, error = function(e) {\r\n      showNotification(paste(\"Analysis error:\", e$message), type = \"error\")\r\n    })\r\n  })\r\n  \r\n  # Results displays\r\n  output$population_display <- renderText({\r\n    req(analysis_results())\r\n    format(analysis_results()$population_estimate, big.mark = \",\")\r\n  })\r\n  \r\n  output$ci_display <- renderText({\r\n    req(analysis_results())\r\n    res <- analysis_results()\r\n    ci_level <- round(res$confidence_level * 100)\r\n    paste0(ci_level, \"% CI: \", round(res$confidence_interval[\"lower\"]), \" - \", \r\n           round(res$confidence_interval[\"upper\"]))\r\n  })\r\n  \r\n  output$min_alive_display <- renderText({\r\n    req(analysis_results())\r\n    analysis_results()$minimum_alive\r\n  })\r\n  \r\n  output$mean_chapman_display <- renderText({\r\n    req(analysis_results())\r\n    res <- analysis_results()\r\n    if(is.na(res$mean_chapman_estimate)) {\r\n      \"N/A\"\r\n    } else {\r\n      format(round(res$mean_chapman_estimate), big.mark = \",\")\r\n    }\r\n  })\r\n  \r\n  # Results table\r\n  output$results_table <- renderTable({\r\n    req(analysis_results())\r\n    res <- analysis_results()\r\n    data.frame(\r\n      Parameter = c(\"Method\", \"Confidence Level\", \"Max Log-Likelihood\"),\r\n      Value = c(\r\n        \"Joint Hypergeometric MLE\",\r\n        paste0(round(res$confidence_level * 100), \"%\"),\r\n        round(res$max_loglikelihood, 2)\r\n      )\r\n    )\r\n  }, bordered = TRUE, align = 'c', width = '100%')\r\n  \r\n  # Occasion data table - simplified for Shinylive\r\n  output$occasion_table <- renderTable({\r\n    req(analysis_results())\r\n    res <- analysis_results()$occasion_data\r\n    res\r\n  }, bordered = TRUE, align = 'c', width = '100%')\r\n  \r\n  # Simple base plot for Shinylive compatibility\r\n  output$sighting_plot <- renderPlot({\r\n    req(analysis_results())\r\n    res <- analysis_results()$occasion_data\r\n    \r\n    # Create a simple bar plot using base R graphics\r\n    bar_data <- as.matrix(res[, c(\"marked_seen\", \"unmarked_seen\")])\r\n    colnames(bar_data) <- c(\"Marked Seen\", \"Unmarked Seen\")\r\n    \r\n    barplot(\r\n      t(bar_data),\r\n      beside = FALSE,\r\n      col = c(\"steelblue\", \"indianred\"),\r\n      main = \"Sighting Data by Occasion\",\r\n      xlab = \"Occasion\",\r\n      ylab = \"Number of Animals\",\r\n      legend.text = colnames(bar_data),\r\n      args.legend = list(x = \"topright\")\r\n    )\r\n  })\r\n}\r\n\r\n# Run the application \r\nshinyApp(ui = ui, server = server)\r\n","type":"text"},{"name":"NOREMARK.GUI.Rproj","content":"Version: 1.0\r\n\r\nRestoreWorkspace: Default\r\nSaveWorkspace: Default\r\nAlwaysSaveHistory: Default\r\n\r\nEnableCodeIndexing: Yes\r\nUseSpacesForTab: Yes\r\nNumSpacesForTab: 2\r\nEncoding: UTF-8\r\n\r\nRnwWeave: Sweave\r\nLaTeX: pdfLaTeX\r\n","type":"text"}]
